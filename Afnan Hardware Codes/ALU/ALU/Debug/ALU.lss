
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a6  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000524  00000000  00000000  00000786  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025b  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000302  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000196  00000000  00000000  0000122e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{
	// Some pins of PORTC can not be used for I/O directly.
	// turn of JTAG to use them
	// o write a 1 to the JTD bit twice consecutively to turn it off
	MCUCSR = (1<<JTD);  MCUCSR = (1<<JTD);
  6c:	80 e8       	ldi	r24, 0x80	; 128
  6e:	84 bf       	out	0x34, r24	; 52
  70:	84 bf       	out	0x34, r24	; 52

	DDRA = 0xF0;				// A[3:0] srcreg2/dstreg from mux
  72:	80 ef       	ldi	r24, 0xF0	; 240
  74:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xF0;				// input from register srcreg
  76:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b00000111;				// D[7] - Zero Flag | D[6:3] - Output
  78:	87 e0       	ldi	r24, 0x07	; 7
  7a:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xF8;				//aluop c[2:0] from control
  7c:	88 ef       	ldi	r24, 0xF8	; 248
  7e:	84 bb       	out	0x14, r24	; 20
	uint8_t control_bits;
	uint8_t in1, in2, out;

	while (1)
	{
		control_bits = PINC & 0x07;
  80:	93 b3       	in	r25, 0x13	; 19
  82:	97 70       	andi	r25, 0x07	; 7

		in1 = PINB & 0x0f;//srcreg1
  84:	46 b3       	in	r20, 0x16	; 22
  86:	84 2f       	mov	r24, r20
  88:	8f 70       	andi	r24, 0x0F	; 15
		in2 = (PINB & 0x0f);//srcreg2/dstreg
  8a:	36 b3       	in	r19, 0x16	; 22
  8c:	53 2f       	mov	r21, r19
  8e:	5f 70       	andi	r21, 0x0F	; 15
		out = 0;
		//in1=0b0001;
		//in2=0b0001;
		

		if(control_bits == 0) {
  90:	91 11       	cpse	r25, r1
  92:	02 c0       	rjmp	.+4      	; 0x98 <main+0x2c>
			out = in1 + in2;
  94:	85 0f       	add	r24, r21
  96:	2a c0       	rjmp	.+84     	; 0xec <main+0x80>
			} else if(control_bits == 1){
  98:	91 30       	cpi	r25, 0x01	; 1
  9a:	11 f4       	brne	.+4      	; 0xa0 <main+0x34>
			out = in1 - in2;
  9c:	85 1b       	sub	r24, r21
  9e:	26 c0       	rjmp	.+76     	; 0xec <main+0x80>
			} else if(control_bits == 2) {
  a0:	92 30       	cpi	r25, 0x02	; 2
  a2:	21 f4       	brne	.+8      	; 0xac <main+0x40>
			out = in1 & in2;
  a4:	84 2f       	mov	r24, r20
  a6:	83 23       	and	r24, r19
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	20 c0       	rjmp	.+64     	; 0xec <main+0x80>
			} else if(control_bits == 3) {
  ac:	93 30       	cpi	r25, 0x03	; 3
  ae:	21 f4       	brne	.+8      	; 0xb8 <main+0x4c>
			out = in1 | in2;
  b0:	84 2f       	mov	r24, r20
  b2:	83 2b       	or	r24, r19
  b4:	8f 70       	andi	r24, 0x0F	; 15
  b6:	1a c0       	rjmp	.+52     	; 0xec <main+0x80>
			} else if(control_bits == 4) {
  b8:	94 30       	cpi	r25, 0x04	; 4
  ba:	29 f4       	brne	.+10     	; 0xc6 <main+0x5a>
			out = ~(in1 | in2);
  bc:	84 2f       	mov	r24, r20
  be:	83 2b       	or	r24, r19
  c0:	8f 70       	andi	r24, 0x0F	; 15
  c2:	80 95       	com	r24
  c4:	13 c0       	rjmp	.+38     	; 0xec <main+0x80>
			} else if(control_bits == 5) {
  c6:	95 30       	cpi	r25, 0x05	; 5
  c8:	29 f4       	brne	.+10     	; 0xd4 <main+0x68>
			out = in1 << in2;
  ca:	01 c0       	rjmp	.+2      	; 0xce <main+0x62>
  cc:	88 0f       	add	r24, r24
  ce:	5a 95       	dec	r21
  d0:	ea f7       	brpl	.-6      	; 0xcc <main+0x60>
  d2:	0c c0       	rjmp	.+24     	; 0xec <main+0x80>
			} else if(control_bits == 6) {
  d4:	96 30       	cpi	r25, 0x06	; 6
  d6:	49 f4       	brne	.+18     	; 0xea <main+0x7e>
			out = in1 >> in2;
  d8:	28 2f       	mov	r18, r24
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	c9 01       	movw	r24, r18
  de:	02 c0       	rjmp	.+4      	; 0xe4 <main+0x78>
  e0:	95 95       	asr	r25
  e2:	87 95       	ror	r24
  e4:	5a 95       	dec	r21
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <main+0x74>
  e8:	01 c0       	rjmp	.+2      	; 0xec <main+0x80>
	{
		control_bits = PINC & 0x07;

		in1 = PINB & 0x0f;//srcreg1
		in2 = (PINB & 0x0f);//srcreg2/dstreg
		out = 0;
  ea:	80 e0       	ldi	r24, 0x00	; 0
			out = in1 << in2;
			} else if(control_bits == 6) {
			out = in1 >> in2;
		}

		out = out & 0x0f;
  ec:	8f 70       	andi	r24, 0x0F	; 15
		if(!out) {
  ee:	09 f4       	brne	.+2      	; 0xf2 <main+0x86>
			out = out | 0x80;
  f0:	80 68       	ori	r24, 0x80	; 128
		}
		//change this
		PORTD = out<<3;
  f2:	88 0f       	add	r24, r24
  f4:	88 0f       	add	r24, r24
  f6:	88 0f       	add	r24, r24
  f8:	82 bb       	out	0x12, r24	; 18
	DDRC = 0xF8;				//aluop c[2:0] from control

	uint8_t control_bits;
	uint8_t in1, in2, out;

	while (1)
  fa:	c2 cf       	rjmp	.-124    	; 0x80 <main+0x14>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
